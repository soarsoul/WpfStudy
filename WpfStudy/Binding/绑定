WPF绑定使得原本需要多行代码实现的功能，现在只需要简单的XAML代码就可以完成之前多行后台代码实现的功能。
WPF绑定可以理解为一种关系，该关系告诉WPF从一个源对象提取一些信息，并将这些信息来设置目标对象的属性。
目标属性总是依赖属性。然而，源对象可以是任何内容，可以是一个WPF元素、或ADO.NET数据对象或自定义的数据对象等

1.绑定元素对象(BindingElement.xaml)
  即数据源是一个WPF元素对象并且源属性是依赖属性。由于依赖属性具有内置的更改通知支持，当在源对象中改变依赖属性的值时，会立即更新目标对象中的绑定属性
  {Binding ElementName=源对象名字, Path=源对象名字的属性}  //Path除了可以直接绑定属性之外，还可以绑定属性的属性
  另外，如果绑定失败时，WPF不会引发异常来告知绑定失败的原因。然而在调试模式下，你可以在输出窗口来查看绑定失败的信息

2.绑定模式(BindingElement.xaml)
  要支持双向绑定，只需要设置Binding对象的Mode属性为TwoWay即可。{Binding ElementName=sliderFontSize,Path=Value,Mode=TwoWay}
  Mode属性除了可以设置OneWay，TwoWay值外，还可以设置Default、OneTime和OneWayToSource
  通过代码方式动态绑定：还可以通过使用BindingOperations类的ClearBinding方法来移除数据绑定。还可以使用ClearAllBindings移除一个元素的所有数据绑定
   Binding binding = new Binding();
   binding.Source = sliderFontSize;
   binding.Path = new PropertyPath("Value");
   binding.Mode = BindingMode.TwoWay;
   lbtext.SetBinding(TextBlock.FontSizeProperty, binding);

3.绑定的更新(BindingElement.xaml)
  当使用OneWay或TwoWay绑定时，改变后的值会立即从源传播到目标。然而，从目标到源传播未必会立即发生。
  它们的行为是由Binding.UpdateSourceTrigger属性控制。Explicit:UpdateSource时生效  LostFocus:失去焦点  PropertyChanged:依赖属性改变。默认大多是PropertyChanged，文本框是LostFocus
  注意，UpdateSourceTrigger属性值并不影响目标的更新方式，它仅仅控制TwoWay模式或OneWayToSource模式的绑定更新源的方式
  {Binding ElementName=lbtext,Path=FontSize,UpdateSourceTrigger=PropertyChanged,Mode=TwoWay}
  UpdateSourceTrigger.Explicit模式时，BindingExpression.UpdateSource方法触发立即刷新并更新字体大小的操作
   // 获得应用于文本框上的绑定
   BindingExpression be = txtFontSize.GetBindingExpression(TextBox.TextProperty);
   // 调用UpdateSource更新源对象
   be.UpdateSource();

4.绑定非元素对象(BindingByDataContext.xaml)
  更常见的情况是创建从一个对象中提起数据的绑定表达式。不过希望绑定的信息必须存储在一个公有属性中。因为WPF绑定不能获取私有信息或公有字段
  当绑定一个非元素对象时，不能使用Binding.ElementName属性，但可以使用以下属性中的一个：
  .Source——该属性是指向源对象的引用，即提供数据的对象。 
            {Binding Source={StaticResource CustomFont},Path=Source}
  .RelativeSource——该属性使用RelativeSource对象指定可以根据相对于目标对象的关系指向源对象。创建控件模板和数据模板时适用，默认值为null。
            {Binding Path=Title, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}
  .DataContext属性——如果没有使用Source或RelativeSource属性指定一个数据源，WPF会从当前元素开始在元素树中向上查找。检查每个元素的DataContext属性，并使用第一个非空的DataContext属性。当然你也可以自己设置DataContext属性。

5.提高大列表的性能
  1)UI虚拟化——UI虚拟化是列表仅为当前显示项创建容器对象的一种技术 <VirtualizingStackPanel></VirtualizingStackPanel>
  2)项目容器再循环——WPF 3.5 SP1使用项目容器再循环改进了虚拟化  <ListBox VirtualizingPanel.VirtualizationMode="Recycling"/>
  3)延迟滚动——为了进一步提供滚动性能，可以开启延迟滚动功能       <ListBox ScrollViewer.IsDeferredScrollingEnabled="True"/>

6.数据验证和数据转换