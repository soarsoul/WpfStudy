1,资源基础介绍:
  尽管每个元素都提供了Resources属性，但通常在窗口级别上定义资源，如下定义一个字符串资源
    <Window.Resources>
        <!--定义一个字符串资源-->
        <sys:String x:Key="nameStr">
            LearningHard博客：http://www.cnblogs.com/zhili/
        </sys:String>
    </Window.Resources>
	<!--通过资源key来对资源进行使用-->
    <TextBlock Text="{StaticResource nameStr}" Margin="10"/>

2，静态资源和动态资源区别(StaticAndDynamicResource.xaml)
  对于静态资源在第一次创建窗口时，一次性地设置完毕；而对于动态资源，如果发生了改变，则会重新应用资源

3,资源字典(StaticAndDynamicResource.xaml)
  每个Resources属性存储着一个资源字典集合。如果希望在多个项目之间共享资源的话，就可以创建一个资源字典
    <ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
       <SolidColorBrush x:Key="blueBrush" Color="Blue"/>
       <FontWeight x:Key="fontWeight">Bold</FontWeight>
    </ResourceDictionary>
  为了使用资源字典，需要将其合并到应用程序中资源集合位置，当然你也可以合并到窗口资源集合中，但是通常是合并到应用程序资源集合
    <Application.Resources>
        <!--合并资源字典到Application.Resources中-->
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="Generic.xaml"/>
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </Application.Resources>

4,如果想在多个应用程序共享资源怎么办呢？最简单的方法就是在每个应用程序中拷贝一份资源字典的XAML文件，但是这样不能对版本进行控制，
  显然这不是一个好的办法。更好的办法是将资源字典编译到一个单独的类库程序集中，应用程序可以通过引用程序集的方式来共享资源
  使用这种方式面临着另一个问题，即如何获得所需要的资源并在应用程序中使用资源,可以采用两种方法:
  ・第一种办法是通过代码创建一个ResourceDictionary对象，再通过指定其Source属性来定位程序中资源字典文件，一旦创建了ResourceDictionary对象，就可以通过key来检索对应的资源
    这种方式不需要手动指定资源，当加载一个新的资源字典时，窗口中所有的DynamicResource引用都会自动引用新的资源，这样的方式可以用来构建动态的皮肤功能
    ResourceDictionary resourceDic = new ResourceDictionary();
    // ReusableDictionary.xaml是资源字典文件
    resourceDic.Source = new Uri("ResourceLibrary;component/ReusableDictionary.xaml", UriKind.Relative);
    SolidColorBrush blueBrush =(SolidColorBrush)resourceDic["BlueBrush"];
　・另外一种办法可以使用ComponentResourceKey标记，使用ComponentResourceKey为资源创建键名

5,在Custom Control Library中定义和使用共享资源(https://blogs.msdn.microsoft.com/wpfsdk/2007/06/08/defining-and-using-shared-resources-in-a-custom-control-library/)参照
  一个应用在查找资源时，分为3个level:
  1)element level 搜索逻辑亲的资源，一直到根元素
  2)application level 通过application对象定义资源
  3)theme level 存储在一个子文件夹Themes，文件中的文件可以是generic.xaml，Aero.NormalColor.xaml, Luna.NormalColor.xaml, Royale.NormalColor.xaml
     系统在theme级别查找资源，首先找Themes文件夹，再找generic.xaml

6，样式(StyleNoKey.xaml,StyleHaveKey.xaml)
  样式可以理解为元素的属性集合。与Web中的CSS类似。WPF可以指定具体的元素类型为目标，并且WPF样式还支持触发器，即当一个属性发生变化的时，触发器中的样式才会被应用
  wpf资源其实完全可以完成样式的功能，只是wpf样式对资源中定义的对象进行封装。
  可以把一些公共的属性定义放在样式中进行定义，然后需要引用这些属性的控件只需要引用具体的样式即可，而不需要对这多个属性进行分别设置
  如果定义的样式没有定义key，对应的样式会应用到目标对象。不想使用定义的样式，在控件的style属性，Style="{x:Null}"
  如果定义的样式有定义key，必须显示指定样式key，对应的样式才会被应用到目标对象

7,样式触发器(StyleTrigger.xaml)
  在样式中定义的触发器，只有在该属性或事件发生变化时才会被触发
  属性变化触发(StyleTrigger.xaml)，事件变化触发(StyleTriggerByEvent.xaml)